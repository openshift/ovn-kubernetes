# ovnkube-identity
# starts ovnkube-identity
# it is run on the master(s).
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: ovnkube-identity
  # namespace set up by install
  namespace: ovn-kubernetes
  annotations:
    kubernetes.io/description: |
      This DaemonSet launches the ovnkube-identity networking component on control-plane nodes.
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: ovnkube-identity
  updateStrategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ovnkube-identity
        name: ovnkube-identity
        component: network
        type: infra
        kubernetes.io/os: "linux"
    spec:
      priorityClassName: "system-cluster-critical"
      serviceAccountName: ovnkube-identity
      hostNetwork: true
      dnsPolicy: Default
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
        kubernetes.io/os: "linux"
      containers:
      - name: ovnkube-identity
        image: "{{ ovn_image | default('docker.io/ovnkube/ovn-daemonset:latest') }}"
        imagePullPolicy: "{{ ovn_image_pull_policy | default('IfNotPresent') }}"
        command: ["/root/ovnkube.sh", "ovnkube-identity"]
        securityContext:
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
        resources:
          requests:
            cpu: 100m
            memory: 300Mi
        volumeMounts:
          - mountPath: /etc/webhook-cert/
            name: webhook-cert
        env:
          - name: OVN_DAEMONSET_VERSION
            value: "1.0.0"
          - name: K8S_APISERVER
            valueFrom:
              configMapKeyRef:
                key: k8s_apiserver
                name: ovn-config
          - name: OVNKUBE_LOGLEVEL
            value: "{{ ovnkube_master_loglevel }}"
          - name: OVN_ENABLE_INTERCONNECT
            value: "{{ ovn_enable_interconnect }}"
          - name: OVN_HYBRID_OVERLAY_ENABLE
            value: "{{ ovn_hybrid_overlay_enable }}"
      volumes:
        - name: webhook-cert
          secret:
            secretName: ovnkube-webhook-cert
      tolerations:
      - operator: "Exists"

---
apiVersion: v1
kind: Secret
metadata:
  name: ovnkube-webhook-cert
  namespace: ovn-kubernetes
data:
  tls.crt: {{ webhook_cert }}
  tls.key: {{ webhook_key }}
type: kubernetes.io/tls

---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: ovn-kubernetes-admission-webhook-node
webhooks:
  - name: ovn-kubernetes-admission-webhook-node.k8s.io
    clientConfig:
      url: https://localhost:9443/node
      caBundle: {{ webhook_ca_bundle }}
    admissionReviewVersions: ['v1']
    sideEffects: None
    rules:
      - operations: [ "UPDATE" ]
        apiGroups: ["*"]
        apiVersions: ["*"]
        resources: ["nodes/status"] # Using /status subresource doesn't protect from other users changing the annotations
        scope: "*"

# in non-ic environments ovnkube-node doesn't have the permissions to update pods
{% if ovn_enable_interconnect == "true" -%}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: ovn-kubernetes-admission-webhook-pod
webhooks:
  - name: ovn-kubernetes-admission-webhook-pod.k8s.io
    clientConfig:
      url: https://localhost:9443/pod
      caBundle: {{ webhook_ca_bundle }}
    admissionReviewVersions: ['v1']
    sideEffects: None
    rules:
      - operations: [ "UPDATE" ]
        apiGroups: ["*"]
        apiVersions: ["*"]
        resources: ["pods/status"] # Using /status subresource doesn't protect from other users changing the annotations
        scope: "*"
{%- endif %}
