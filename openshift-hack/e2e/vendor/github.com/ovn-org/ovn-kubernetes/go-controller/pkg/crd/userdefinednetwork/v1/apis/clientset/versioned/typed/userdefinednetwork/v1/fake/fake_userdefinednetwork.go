/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1 "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/crd/userdefinednetwork/v1"
	userdefinednetworkv1 "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/crd/userdefinednetwork/v1/apis/applyconfiguration/userdefinednetwork/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeUserDefinedNetworks implements UserDefinedNetworkInterface
type FakeUserDefinedNetworks struct {
	Fake *FakeK8sV1
	ns   string
}

var userdefinednetworksResource = v1.SchemeGroupVersion.WithResource("userdefinednetworks")

var userdefinednetworksKind = v1.SchemeGroupVersion.WithKind("UserDefinedNetwork")

// Get takes name of the userDefinedNetwork, and returns the corresponding userDefinedNetwork object, and an error if there is any.
func (c *FakeUserDefinedNetworks) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.UserDefinedNetwork, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(userdefinednetworksResource, c.ns, name), &v1.UserDefinedNetwork{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.UserDefinedNetwork), err
}

// List takes label and field selectors, and returns the list of UserDefinedNetworks that match those selectors.
func (c *FakeUserDefinedNetworks) List(ctx context.Context, opts metav1.ListOptions) (result *v1.UserDefinedNetworkList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(userdefinednetworksResource, userdefinednetworksKind, c.ns, opts), &v1.UserDefinedNetworkList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.UserDefinedNetworkList{ListMeta: obj.(*v1.UserDefinedNetworkList).ListMeta}
	for _, item := range obj.(*v1.UserDefinedNetworkList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested userDefinedNetworks.
func (c *FakeUserDefinedNetworks) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(userdefinednetworksResource, c.ns, opts))

}

// Create takes the representation of a userDefinedNetwork and creates it.  Returns the server's representation of the userDefinedNetwork, and an error, if there is any.
func (c *FakeUserDefinedNetworks) Create(ctx context.Context, userDefinedNetwork *v1.UserDefinedNetwork, opts metav1.CreateOptions) (result *v1.UserDefinedNetwork, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(userdefinednetworksResource, c.ns, userDefinedNetwork), &v1.UserDefinedNetwork{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.UserDefinedNetwork), err
}

// Update takes the representation of a userDefinedNetwork and updates it. Returns the server's representation of the userDefinedNetwork, and an error, if there is any.
func (c *FakeUserDefinedNetworks) Update(ctx context.Context, userDefinedNetwork *v1.UserDefinedNetwork, opts metav1.UpdateOptions) (result *v1.UserDefinedNetwork, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(userdefinednetworksResource, c.ns, userDefinedNetwork), &v1.UserDefinedNetwork{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.UserDefinedNetwork), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeUserDefinedNetworks) UpdateStatus(ctx context.Context, userDefinedNetwork *v1.UserDefinedNetwork, opts metav1.UpdateOptions) (*v1.UserDefinedNetwork, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(userdefinednetworksResource, "status", c.ns, userDefinedNetwork), &v1.UserDefinedNetwork{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.UserDefinedNetwork), err
}

// Delete takes name of the userDefinedNetwork and deletes it. Returns an error if one occurs.
func (c *FakeUserDefinedNetworks) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(userdefinednetworksResource, c.ns, name, opts), &v1.UserDefinedNetwork{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeUserDefinedNetworks) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(userdefinednetworksResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1.UserDefinedNetworkList{})
	return err
}

// Patch applies the patch and returns the patched userDefinedNetwork.
func (c *FakeUserDefinedNetworks) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.UserDefinedNetwork, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(userdefinednetworksResource, c.ns, name, pt, data, subresources...), &v1.UserDefinedNetwork{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.UserDefinedNetwork), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied userDefinedNetwork.
func (c *FakeUserDefinedNetworks) Apply(ctx context.Context, userDefinedNetwork *userdefinednetworkv1.UserDefinedNetworkApplyConfiguration, opts metav1.ApplyOptions) (result *v1.UserDefinedNetwork, err error) {
	if userDefinedNetwork == nil {
		return nil, fmt.Errorf("userDefinedNetwork provided to Apply must not be nil")
	}
	data, err := json.Marshal(userDefinedNetwork)
	if err != nil {
		return nil, err
	}
	name := userDefinedNetwork.Name
	if name == nil {
		return nil, fmt.Errorf("userDefinedNetwork.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(userdefinednetworksResource, c.ns, *name, types.ApplyPatchType, data), &v1.UserDefinedNetwork{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.UserDefinedNetwork), err
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *FakeUserDefinedNetworks) ApplyStatus(ctx context.Context, userDefinedNetwork *userdefinednetworkv1.UserDefinedNetworkApplyConfiguration, opts metav1.ApplyOptions) (result *v1.UserDefinedNetwork, err error) {
	if userDefinedNetwork == nil {
		return nil, fmt.Errorf("userDefinedNetwork provided to Apply must not be nil")
	}
	data, err := json.Marshal(userDefinedNetwork)
	if err != nil {
		return nil, err
	}
	name := userDefinedNetwork.Name
	if name == nil {
		return nil, fmt.Errorf("userDefinedNetwork.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(userdefinednetworksResource, c.ns, *name, types.ApplyPatchType, data, "status"), &v1.UserDefinedNetwork{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.UserDefinedNetwork), err
}
