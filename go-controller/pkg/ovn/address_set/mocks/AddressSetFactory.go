// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	libovsdbops "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/libovsdb/ops"
	addressset "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/ovn/address_set"

	mock "github.com/stretchr/testify/mock"

	net "net"
)

// AddressSetFactory is an autogenerated mock type for the AddressSetFactory type
type AddressSetFactory struct {
	mock.Mock
}

// DestroyAddressSet provides a mock function with given fields: dbIDs
func (_m *AddressSetFactory) DestroyAddressSet(dbIDs *libovsdbops.DbObjectIDs) error {
	ret := _m.Called(dbIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(*libovsdbops.DbObjectIDs) error); ok {
		r0 = rf(dbIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureAddressSet provides a mock function with given fields: dbIDs
func (_m *AddressSetFactory) EnsureAddressSet(dbIDs *libovsdbops.DbObjectIDs) (addressset.AddressSet, error) {
	ret := _m.Called(dbIDs)

	var r0 addressset.AddressSet
	if rf, ok := ret.Get(0).(func(*libovsdbops.DbObjectIDs) addressset.AddressSet); ok {
		r0 = rf(dbIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(addressset.AddressSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*libovsdbops.DbObjectIDs) error); ok {
		r1 = rf(dbIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressSet provides a mock function with given fields: dbIDs
func (_m *AddressSetFactory) GetAddressSet(dbIDs *libovsdbops.DbObjectIDs) (addressset.AddressSet, error) {
	ret := _m.Called(dbIDs)

	var r0 addressset.AddressSet
	if rf, ok := ret.Get(0).(func(*libovsdbops.DbObjectIDs) addressset.AddressSet); ok {
		r0 = rf(dbIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(addressset.AddressSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*libovsdbops.DbObjectIDs) error); ok {
		r1 = rf(dbIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAddressSet provides a mock function with given fields: dbIDs, ips
func (_m *AddressSetFactory) NewAddressSet(dbIDs *libovsdbops.DbObjectIDs, ips []net.IP) (addressset.AddressSet, error) {
	ret := _m.Called(dbIDs, ips)

	var r0 addressset.AddressSet
	if rf, ok := ret.Get(0).(func(*libovsdbops.DbObjectIDs, []net.IP) addressset.AddressSet); ok {
		r0 = rf(dbIDs, ips)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(addressset.AddressSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*libovsdbops.DbObjectIDs, []net.IP) error); ok {
		r1 = rf(dbIDs, ips)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessEachAddressSet provides a mock function with given fields: ownerController, dbIDsType, iteratorFn
func (_m *AddressSetFactory) ProcessEachAddressSet(ownerController string, dbIDsType *libovsdbops.ObjectIDsType, iteratorFn addressset.AddressSetIterFunc) error {
	ret := _m.Called(ownerController, dbIDsType, iteratorFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *libovsdbops.ObjectIDsType, addressset.AddressSetIterFunc) error); ok {
		r0 = rf(ownerController, dbIDsType, iteratorFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAddressSetFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewAddressSetFactory creates a new instance of AddressSetFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAddressSetFactory(t mockConstructorTestingTNewAddressSetFactory) *AddressSetFactory {
	mock := &AddressSetFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
