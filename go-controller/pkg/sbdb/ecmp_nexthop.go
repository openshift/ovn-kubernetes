// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package sbdb

import "github.com/ovn-kubernetes/libovsdb/model"

const ECMPNexthopTable = "ECMP_Nexthop"

// ECMPNexthop defines an object in ECMP_Nexthop table
type ECMPNexthop struct {
	UUID        string            `ovsdb:"_uuid"`
	Datapath    string            `ovsdb:"datapath"`
	ExternalIDs map[string]string `ovsdb:"external_ids"`
	MAC         string            `ovsdb:"mac"`
	Nexthop     string            `ovsdb:"nexthop"`
	Port        string            `ovsdb:"port"`
}

func (a *ECMPNexthop) GetUUID() string {
	return a.UUID
}

func (a *ECMPNexthop) GetDatapath() string {
	return a.Datapath
}

func (a *ECMPNexthop) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copyECMPNexthopExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalECMPNexthopExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *ECMPNexthop) GetMAC() string {
	return a.MAC
}

func (a *ECMPNexthop) GetNexthop() string {
	return a.Nexthop
}

func (a *ECMPNexthop) GetPort() string {
	return a.Port
}

func (a *ECMPNexthop) DeepCopyInto(b *ECMPNexthop) {
	*b = *a
	b.ExternalIDs = copyECMPNexthopExternalIDs(a.ExternalIDs)
}

func (a *ECMPNexthop) DeepCopy() *ECMPNexthop {
	b := new(ECMPNexthop)
	a.DeepCopyInto(b)
	return b
}

func (a *ECMPNexthop) CloneModelInto(b model.Model) {
	c := b.(*ECMPNexthop)
	a.DeepCopyInto(c)
}

func (a *ECMPNexthop) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *ECMPNexthop) Equals(b *ECMPNexthop) bool {
	return a.UUID == b.UUID &&
		a.Datapath == b.Datapath &&
		equalECMPNexthopExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		a.MAC == b.MAC &&
		a.Nexthop == b.Nexthop &&
		a.Port == b.Port
}

func (a *ECMPNexthop) EqualsModel(b model.Model) bool {
	c := b.(*ECMPNexthop)
	return a.Equals(c)
}

var _ model.CloneableModel = &ECMPNexthop{}
var _ model.ComparableModel = &ECMPNexthop{}
