// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package sbdb

import "github.com/ovn-kubernetes/libovsdb/model"

const AdvertisedRouteTable = "Advertised_Route"

// AdvertisedRoute defines an object in Advertised_Route table
type AdvertisedRoute struct {
	UUID        string            `ovsdb:"_uuid"`
	Datapath    string            `ovsdb:"datapath"`
	ExternalIDs map[string]string `ovsdb:"external_ids"`
	IPPrefix    string            `ovsdb:"ip_prefix"`
	LogicalPort string            `ovsdb:"logical_port"`
	TrackedPort *string           `ovsdb:"tracked_port"`
}

func (a *AdvertisedRoute) GetUUID() string {
	return a.UUID
}

func (a *AdvertisedRoute) GetDatapath() string {
	return a.Datapath
}

func (a *AdvertisedRoute) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copyAdvertisedRouteExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalAdvertisedRouteExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *AdvertisedRoute) GetIPPrefix() string {
	return a.IPPrefix
}

func (a *AdvertisedRoute) GetLogicalPort() string {
	return a.LogicalPort
}

func (a *AdvertisedRoute) GetTrackedPort() *string {
	return a.TrackedPort
}

func copyAdvertisedRouteTrackedPort(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalAdvertisedRouteTrackedPort(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *AdvertisedRoute) DeepCopyInto(b *AdvertisedRoute) {
	*b = *a
	b.ExternalIDs = copyAdvertisedRouteExternalIDs(a.ExternalIDs)
	b.TrackedPort = copyAdvertisedRouteTrackedPort(a.TrackedPort)
}

func (a *AdvertisedRoute) DeepCopy() *AdvertisedRoute {
	b := new(AdvertisedRoute)
	a.DeepCopyInto(b)
	return b
}

func (a *AdvertisedRoute) CloneModelInto(b model.Model) {
	c := b.(*AdvertisedRoute)
	a.DeepCopyInto(c)
}

func (a *AdvertisedRoute) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *AdvertisedRoute) Equals(b *AdvertisedRoute) bool {
	return a.UUID == b.UUID &&
		a.Datapath == b.Datapath &&
		equalAdvertisedRouteExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		a.IPPrefix == b.IPPrefix &&
		a.LogicalPort == b.LogicalPort &&
		equalAdvertisedRouteTrackedPort(a.TrackedPort, b.TrackedPort)
}

func (a *AdvertisedRoute) EqualsModel(b model.Model) bool {
	c := b.(*AdvertisedRoute)
	return a.Equals(c)
}

var _ model.CloneableModel = &AdvertisedRoute{}
var _ model.ComparableModel = &AdvertisedRoute{}
