// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	time "time"

	dns "github.com/miekg/dns"
	mock "github.com/stretchr/testify/mock"
)

// DNSOps is an autogenerated mock type for the DNSOps type
type DNSOps struct {
	mock.Mock
}

// ClientConfigFromFile provides a mock function with given fields: resolvconf
func (_m *DNSOps) ClientConfigFromFile(resolvconf string) (*dns.ClientConfig, error) {
	ret := _m.Called(resolvconf)

	if len(ret) == 0 {
		panic("no return value specified for ClientConfigFromFile")
	}

	var r0 *dns.ClientConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dns.ClientConfig, error)); ok {
		return rf(resolvconf)
	}
	if rf, ok := ret.Get(0).(func(string) *dns.ClientConfig); ok {
		r0 = rf(resolvconf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dns.ClientConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(resolvconf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exchange provides a mock function with given fields: c, m, a
func (_m *DNSOps) Exchange(c *dns.Client, m *dns.Msg, a string) (*dns.Msg, time.Duration, error) {
	ret := _m.Called(c, m, a)

	if len(ret) == 0 {
		panic("no return value specified for Exchange")
	}

	var r0 *dns.Msg
	var r1 time.Duration
	var r2 error
	if rf, ok := ret.Get(0).(func(*dns.Client, *dns.Msg, string) (*dns.Msg, time.Duration, error)); ok {
		return rf(c, m, a)
	}
	if rf, ok := ret.Get(0).(func(*dns.Client, *dns.Msg, string) *dns.Msg); ok {
		r0 = rf(c, m, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dns.Msg)
		}
	}

	if rf, ok := ret.Get(1).(func(*dns.Client, *dns.Msg, string) time.Duration); ok {
		r1 = rf(c, m, a)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	if rf, ok := ret.Get(2).(func(*dns.Client, *dns.Msg, string) error); ok {
		r2 = rf(c, m, a)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Fqdn provides a mock function with given fields: s
func (_m *DNSOps) Fqdn(s string) string {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Fqdn")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetQuestion provides a mock function with given fields: msg, z, t
func (_m *DNSOps) SetQuestion(msg *dns.Msg, z string, t uint16) *dns.Msg {
	ret := _m.Called(msg, z, t)

	if len(ret) == 0 {
		panic("no return value specified for SetQuestion")
	}

	var r0 *dns.Msg
	if rf, ok := ret.Get(0).(func(*dns.Msg, string, uint16) *dns.Msg); ok {
		r0 = rf(msg, z, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dns.Msg)
		}
	}

	return r0
}

// NewDNSOps creates a new instance of DNSOps. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDNSOps(t interface {
	mock.TestingT
	Cleanup(func())
}) *DNSOps {
	mock := &DNSOps{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
