// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"

	sriovnet "github.com/k8snetworkplumbingwg/sriovnet"
)

// SriovnetOps is an autogenerated mock type for the SriovnetOps type
type SriovnetOps struct {
	mock.Mock
}

// GetNetDevicesFromAux provides a mock function with given fields: auxDev
func (_m *SriovnetOps) GetNetDevicesFromAux(auxDev string) ([]string, error) {
	ret := _m.Called(auxDev)

	if len(ret) == 0 {
		panic("no return value specified for GetNetDevicesFromAux")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(auxDev)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(auxDev)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(auxDev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetDevicesFromPci provides a mock function with given fields: pciAddress
func (_m *SriovnetOps) GetNetDevicesFromPci(pciAddress string) ([]string, error) {
	ret := _m.Called(pciAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetNetDevicesFromPci")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(pciAddress)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(pciAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pciAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPCIFromDeviceName provides a mock function with given fields: netdevName
func (_m *SriovnetOps) GetPCIFromDeviceName(netdevName string) (string, error) {
	ret := _m.Called(netdevName)

	if len(ret) == 0 {
		panic("no return value specified for GetPCIFromDeviceName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(netdevName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(netdevName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(netdevName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPciFromNetDevice provides a mock function with given fields: name
func (_m *SriovnetOps) GetPciFromNetDevice(name string) (string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetPciFromNetDevice")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPfIndexByVfPciAddress provides a mock function with given fields: vfPciAddress
func (_m *SriovnetOps) GetPfIndexByVfPciAddress(vfPciAddress string) (int, error) {
	ret := _m.Called(vfPciAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetPfIndexByVfPciAddress")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(vfPciAddress)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(vfPciAddress)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(vfPciAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPfPciFromAux provides a mock function with given fields: auxDev
func (_m *SriovnetOps) GetPfPciFromAux(auxDev string) (string, error) {
	ret := _m.Called(auxDev)

	if len(ret) == 0 {
		panic("no return value specified for GetPfPciFromAux")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(auxDev)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(auxDev)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(auxDev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPfPciFromVfPci provides a mock function with given fields: vfPciAddress
func (_m *SriovnetOps) GetPfPciFromVfPci(vfPciAddress string) (string, error) {
	ret := _m.Called(vfPciAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetPfPciFromVfPci")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(vfPciAddress)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(vfPciAddress)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(vfPciAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPortIndexFromRepresentor provides a mock function with given fields: name
func (_m *SriovnetOps) GetPortIndexFromRepresentor(name string) (int, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetPortIndexFromRepresentor")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepresentorPeerMacAddress provides a mock function with given fields: netdev
func (_m *SriovnetOps) GetRepresentorPeerMacAddress(netdev string) (net.HardwareAddr, error) {
	ret := _m.Called(netdev)

	if len(ret) == 0 {
		panic("no return value specified for GetRepresentorPeerMacAddress")
	}

	var r0 net.HardwareAddr
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (net.HardwareAddr, error)); ok {
		return rf(netdev)
	}
	if rf, ok := ret.Get(0).(func(string) net.HardwareAddr); ok {
		r0 = rf(netdev)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.HardwareAddr)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(netdev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepresentorPortFlavour provides a mock function with given fields: netdev
func (_m *SriovnetOps) GetRepresentorPortFlavour(netdev string) (sriovnet.PortFlavour, error) {
	ret := _m.Called(netdev)

	if len(ret) == 0 {
		panic("no return value specified for GetRepresentorPortFlavour")
	}

	var r0 sriovnet.PortFlavour
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (sriovnet.PortFlavour, error)); ok {
		return rf(netdev)
	}
	if rf, ok := ret.Get(0).(func(string) sriovnet.PortFlavour); ok {
		r0 = rf(netdev)
	} else {
		r0 = ret.Get(0).(sriovnet.PortFlavour)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(netdev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSfIndexByAuxDev provides a mock function with given fields: auxDev
func (_m *SriovnetOps) GetSfIndexByAuxDev(auxDev string) (int, error) {
	ret := _m.Called(auxDev)

	if len(ret) == 0 {
		panic("no return value specified for GetSfIndexByAuxDev")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(auxDev)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(auxDev)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(auxDev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSfRepresentor provides a mock function with given fields: uplink, sfIndex
func (_m *SriovnetOps) GetSfRepresentor(uplink string, sfIndex int) (string, error) {
	ret := _m.Called(uplink, sfIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetSfRepresentor")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (string, error)); ok {
		return rf(uplink, sfIndex)
	}
	if rf, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = rf(uplink, sfIndex)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(uplink, sfIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUplinkRepresentor provides a mock function with given fields: vfPciAddress
func (_m *SriovnetOps) GetUplinkRepresentor(vfPciAddress string) (string, error) {
	ret := _m.Called(vfPciAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetUplinkRepresentor")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(vfPciAddress)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(vfPciAddress)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(vfPciAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUplinkRepresentorFromAux provides a mock function with given fields: auxDev
func (_m *SriovnetOps) GetUplinkRepresentorFromAux(auxDev string) (string, error) {
	ret := _m.Called(auxDev)

	if len(ret) == 0 {
		panic("no return value specified for GetUplinkRepresentorFromAux")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(auxDev)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(auxDev)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(auxDev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVfIndexByPciAddress provides a mock function with given fields: vfPciAddress
func (_m *SriovnetOps) GetVfIndexByPciAddress(vfPciAddress string) (int, error) {
	ret := _m.Called(vfPciAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetVfIndexByPciAddress")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(vfPciAddress)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(vfPciAddress)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(vfPciAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVfRepresentor provides a mock function with given fields: uplink, vfIndex
func (_m *SriovnetOps) GetVfRepresentor(uplink string, vfIndex int) (string, error) {
	ret := _m.Called(uplink, vfIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetVfRepresentor")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (string, error)); ok {
		return rf(uplink, vfIndex)
	}
	if rf, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = rf(uplink, vfIndex)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(uplink, vfIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVfRepresentorDPU provides a mock function with given fields: pfID, vfIndex
func (_m *SriovnetOps) GetVfRepresentorDPU(pfID string, vfIndex string) (string, error) {
	ret := _m.Called(pfID, vfIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetVfRepresentorDPU")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(pfID, vfIndex)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(pfID, vfIndex)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pfID, vfIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsVfPciVfioBound provides a mock function with given fields: pciAddr
func (_m *SriovnetOps) IsVfPciVfioBound(pciAddr string) bool {
	ret := _m.Called(pciAddr)

	if len(ret) == 0 {
		panic("no return value specified for IsVfPciVfioBound")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(pciAddr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewSriovnetOps creates a new instance of SriovnetOps. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSriovnetOps(t interface {
	mock.TestingT
	Cleanup(func())
}) *SriovnetOps {
	mock := &SriovnetOps{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
