// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	netlink "github.com/vishvananda/netlink"
)

// Link is an autogenerated mock type for the Link type
type Link struct {
	mock.Mock
}

// Attrs provides a mock function with given fields:
func (_m *Link) Attrs() *netlink.LinkAttrs {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Attrs")
	}

	var r0 *netlink.LinkAttrs
	if rf, ok := ret.Get(0).(func() *netlink.LinkAttrs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*netlink.LinkAttrs)
		}
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *Link) Type() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewLink creates a new instance of Link. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLink(t interface {
	mock.TestingT
	Cleanup(func())
}) *Link {
	mock := &Link{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
