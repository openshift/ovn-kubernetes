// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// GetAddresses provides a mock function with no fields
func (_m *Interface) GetAddresses() []*net.IPNet {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAddresses")
	}

	var r0 []*net.IPNet
	if rf, ok := ret.Get(0).(func() []*net.IPNet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*net.IPNet)
		}
	}

	return r0
}

// GetInterfaceName provides a mock function with no fields
func (_m *Interface) GetInterfaceName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInterfaceName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
