// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	corev1 "k8s.io/client-go/listers/core/v1"
	cache "k8s.io/client-go/tools/cache"

	mock "github.com/stretchr/testify/mock"
)

// NodeInformer is an autogenerated mock type for the NodeInformer type
type NodeInformer struct {
	mock.Mock
}

// Informer provides a mock function with given fields:
func (_m *NodeInformer) Informer() cache.SharedIndexInformer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Informer")
	}

	var r0 cache.SharedIndexInformer
	if rf, ok := ret.Get(0).(func() cache.SharedIndexInformer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.SharedIndexInformer)
		}
	}

	return r0
}

// Lister provides a mock function with given fields:
func (_m *NodeInformer) Lister() corev1.NodeLister {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Lister")
	}

	var r0 corev1.NodeLister
	if rf, ok := ret.Get(0).(func() corev1.NodeLister); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corev1.NodeLister)
		}
	}

	return r0
}

// NewNodeInformer creates a new instance of NodeInformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeInformer(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeInformer {
	mock := &NodeInformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
