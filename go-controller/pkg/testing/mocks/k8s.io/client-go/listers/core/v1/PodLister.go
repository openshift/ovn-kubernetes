// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	labels "k8s.io/apimachinery/pkg/labels"
	corev1 "k8s.io/client-go/listers/core/v1"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// PodLister is an autogenerated mock type for the PodLister type
type PodLister struct {
	mock.Mock
}

// List provides a mock function with given fields: selector
func (_m *PodLister) List(selector labels.Selector) ([]*v1.Pod, error) {
	ret := _m.Called(selector)

	var r0 []*v1.Pod
	if rf, ok := ret.Get(0).(func(labels.Selector) []*v1.Pod); ok {
		r0 = rf(selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Pod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(labels.Selector) error); ok {
		r1 = rf(selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pods provides a mock function with given fields: namespace
func (_m *PodLister) Pods(namespace string) corev1.PodNamespaceLister {
	ret := _m.Called(namespace)

	var r0 corev1.PodNamespaceLister
	if rf, ok := ret.Get(0).(func(string) corev1.PodNamespaceLister); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corev1.PodNamespaceLister)
		}
	}

	return r0
}

type mockConstructorTestingTNewPodLister interface {
	mock.TestingT
	Cleanup(func())
}

// NewPodLister creates a new instance of PodLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPodLister(t mockConstructorTestingTNewPodLister) *PodLister {
	mock := &PodLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
