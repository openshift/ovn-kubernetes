/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/crd/egressqos/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EgressQoSLister helps list EgressQoSes.
// All objects returned here must be treated as read-only.
type EgressQoSLister interface {
	// List lists all EgressQoSes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.EgressQoS, err error)
	// EgressQoSes returns an object that can list and get EgressQoSes.
	EgressQoSes(namespace string) EgressQoSNamespaceLister
	EgressQoSListerExpansion
}

// egressQoSLister implements the EgressQoSLister interface.
type egressQoSLister struct {
	indexer cache.Indexer
}

// NewEgressQoSLister returns a new EgressQoSLister.
func NewEgressQoSLister(indexer cache.Indexer) EgressQoSLister {
	return &egressQoSLister{indexer: indexer}
}

// List lists all EgressQoSes in the indexer.
func (s *egressQoSLister) List(selector labels.Selector) (ret []*v1.EgressQoS, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EgressQoS))
	})
	return ret, err
}

// EgressQoSes returns an object that can list and get EgressQoSes.
func (s *egressQoSLister) EgressQoSes(namespace string) EgressQoSNamespaceLister {
	return egressQoSNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EgressQoSNamespaceLister helps list and get EgressQoSes.
// All objects returned here must be treated as read-only.
type EgressQoSNamespaceLister interface {
	// List lists all EgressQoSes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.EgressQoS, err error)
	// Get retrieves the EgressQoS from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.EgressQoS, error)
	EgressQoSNamespaceListerExpansion
}

// egressQoSNamespaceLister implements the EgressQoSNamespaceLister
// interface.
type egressQoSNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EgressQoSes in the indexer for a given namespace.
func (s egressQoSNamespaceLister) List(selector labels.Selector) (ret []*v1.EgressQoS, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EgressQoS))
	})
	return ret, err
}

// Get retrieves the EgressQoS from the indexer for a given namespace and name.
func (s egressQoSNamespaceLister) Get(name string) (*v1.EgressQoS, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("egressqos"), name)
	}
	return obj.(*v1.EgressQoS), nil
}
