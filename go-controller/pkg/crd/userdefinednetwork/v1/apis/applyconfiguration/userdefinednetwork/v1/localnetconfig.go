/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/crd/userdefinednetwork/v1"
)

// LocalNetConfigApplyConfiguration represents an declarative configuration of the LocalNetConfig type for use
// with apply.
type LocalNetConfigApplyConfiguration struct {
	Role           *v1.NetworkRole          `json:"role,omitempty"`
	MTU            *int32                   `json:"mtu,omitempty"`
	Subnets        *v1.DualStackCIDRs       `json:"subnets,omitempty"`
	ExcludeSubnets []v1.CIDR                `json:"excludeSubnets,omitempty"`
	IPAMLifecycle  *v1.NetworkIPAMLifecycle `json:"ipamLifecycle,omitempty"`
}

// LocalNetConfigApplyConfiguration constructs an declarative configuration of the LocalNetConfig type for use with
// apply.
func LocalNetConfig() *LocalNetConfigApplyConfiguration {
	return &LocalNetConfigApplyConfiguration{}
}

// WithRole sets the Role field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Role field is set to the value of the last call.
func (b *LocalNetConfigApplyConfiguration) WithRole(value v1.NetworkRole) *LocalNetConfigApplyConfiguration {
	b.Role = &value
	return b
}

// WithMTU sets the MTU field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MTU field is set to the value of the last call.
func (b *LocalNetConfigApplyConfiguration) WithMTU(value int32) *LocalNetConfigApplyConfiguration {
	b.MTU = &value
	return b
}

// WithSubnets sets the Subnets field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Subnets field is set to the value of the last call.
func (b *LocalNetConfigApplyConfiguration) WithSubnets(value v1.DualStackCIDRs) *LocalNetConfigApplyConfiguration {
	b.Subnets = &value
	return b
}

// WithExcludeSubnets adds the given value to the ExcludeSubnets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExcludeSubnets field.
func (b *LocalNetConfigApplyConfiguration) WithExcludeSubnets(values ...v1.CIDR) *LocalNetConfigApplyConfiguration {
	for i := range values {
		b.ExcludeSubnets = append(b.ExcludeSubnets, values[i])
	}
	return b
}

// WithIPAMLifecycle sets the IPAMLifecycle field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPAMLifecycle field is set to the value of the last call.
func (b *LocalNetConfigApplyConfiguration) WithIPAMLifecycle(value v1.NetworkIPAMLifecycle) *LocalNetConfigApplyConfiguration {
	b.IPAMLifecycle = &value
	return b
}
