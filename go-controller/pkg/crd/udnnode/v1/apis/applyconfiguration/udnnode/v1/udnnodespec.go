/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/crd/udnnode/v1"
)

// UDNNodeSpecApplyConfiguration represents a declarative configuration of the UDNNodeSpec type for use
// with apply.
type UDNNodeSpecApplyConfiguration struct {
	NodeSubnets              *v1.DualStackCIDRs `json:"nodeSubnets,omitempty"`
	JoinSubnets              *v1.DualStackCIDRs `json:"joinSubnets,omitempty"`
	ManagementPortMACAddress *string            `json:"managementPortMACAddress,omitempty"`
	Layer2TunnelID           *int               `json:"layer2TunnelID,omitempty"`
}

// UDNNodeSpecApplyConfiguration constructs a declarative configuration of the UDNNodeSpec type for use with
// apply.
func UDNNodeSpec() *UDNNodeSpecApplyConfiguration {
	return &UDNNodeSpecApplyConfiguration{}
}

// WithNodeSubnets sets the NodeSubnets field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeSubnets field is set to the value of the last call.
func (b *UDNNodeSpecApplyConfiguration) WithNodeSubnets(value v1.DualStackCIDRs) *UDNNodeSpecApplyConfiguration {
	b.NodeSubnets = &value
	return b
}

// WithJoinSubnets sets the JoinSubnets field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the JoinSubnets field is set to the value of the last call.
func (b *UDNNodeSpecApplyConfiguration) WithJoinSubnets(value v1.DualStackCIDRs) *UDNNodeSpecApplyConfiguration {
	b.JoinSubnets = &value
	return b
}

// WithManagementPortMACAddress sets the ManagementPortMACAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ManagementPortMACAddress field is set to the value of the last call.
func (b *UDNNodeSpecApplyConfiguration) WithManagementPortMACAddress(value string) *UDNNodeSpecApplyConfiguration {
	b.ManagementPortMACAddress = &value
	return b
}

// WithLayer2TunnelID sets the Layer2TunnelID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Layer2TunnelID field is set to the value of the last call.
func (b *UDNNodeSpecApplyConfiguration) WithLayer2TunnelID(value int) *UDNNodeSpecApplyConfiguration {
	b.Layer2TunnelID = &value
	return b
}
