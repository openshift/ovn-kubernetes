// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package vswitchd

import "github.com/ovn-org/libovsdb/model"

const SFlowTable = "sFlow"

// SFlow defines an object in sFlow table
type SFlow struct {
	UUID        string            `ovsdb:"_uuid"`
	Agent       *string           `ovsdb:"agent"`
	ExternalIDs map[string]string `ovsdb:"external_ids"`
	Header      *int              `ovsdb:"header"`
	Polling     *int              `ovsdb:"polling"`
	Sampling    *int              `ovsdb:"sampling"`
	Targets     []string          `ovsdb:"targets"`
}

func (a *SFlow) GetUUID() string {
	return a.UUID
}

func (a *SFlow) GetAgent() *string {
	return a.Agent
}

func copySFlowAgent(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalSFlowAgent(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *SFlow) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copySFlowExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalSFlowExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *SFlow) GetHeader() *int {
	return a.Header
}

func copySFlowHeader(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalSFlowHeader(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *SFlow) GetPolling() *int {
	return a.Polling
}

func copySFlowPolling(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalSFlowPolling(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *SFlow) GetSampling() *int {
	return a.Sampling
}

func copySFlowSampling(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalSFlowSampling(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *SFlow) GetTargets() []string {
	return a.Targets
}

func copySFlowTargets(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalSFlowTargets(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *SFlow) DeepCopyInto(b *SFlow) {
	*b = *a
	b.Agent = copySFlowAgent(a.Agent)
	b.ExternalIDs = copySFlowExternalIDs(a.ExternalIDs)
	b.Header = copySFlowHeader(a.Header)
	b.Polling = copySFlowPolling(a.Polling)
	b.Sampling = copySFlowSampling(a.Sampling)
	b.Targets = copySFlowTargets(a.Targets)
}

func (a *SFlow) DeepCopy() *SFlow {
	b := new(SFlow)
	a.DeepCopyInto(b)
	return b
}

func (a *SFlow) CloneModelInto(b model.Model) {
	c := b.(*SFlow)
	a.DeepCopyInto(c)
}

func (a *SFlow) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *SFlow) Equals(b *SFlow) bool {
	return a.UUID == b.UUID &&
		equalSFlowAgent(a.Agent, b.Agent) &&
		equalSFlowExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		equalSFlowHeader(a.Header, b.Header) &&
		equalSFlowPolling(a.Polling, b.Polling) &&
		equalSFlowSampling(a.Sampling, b.Sampling) &&
		equalSFlowTargets(a.Targets, b.Targets)
}

func (a *SFlow) EqualsModel(b model.Model) bool {
	c := b.(*SFlow)
	return a.Equals(c)
}

var _ model.CloneableModel = &SFlow{}
var _ model.ComparableModel = &SFlow{}
