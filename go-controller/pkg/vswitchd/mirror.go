// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package vswitchd

import "github.com/ovn-org/libovsdb/model"

const MirrorTable = "Mirror"

// Mirror defines an object in Mirror table
type Mirror struct {
	UUID          string            `ovsdb:"_uuid"`
	ExternalIDs   map[string]string `ovsdb:"external_ids"`
	Name          string            `ovsdb:"name"`
	OutputPort    *string           `ovsdb:"output_port"`
	OutputVLAN    *int              `ovsdb:"output_vlan"`
	SelectAll     bool              `ovsdb:"select_all"`
	SelectDstPort []string          `ovsdb:"select_dst_port"`
	SelectSrcPort []string          `ovsdb:"select_src_port"`
	SelectVLAN    []int             `ovsdb:"select_vlan"`
	Snaplen       *int              `ovsdb:"snaplen"`
	Statistics    map[string]int    `ovsdb:"statistics"`
}

func (a *Mirror) GetUUID() string {
	return a.UUID
}

func (a *Mirror) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copyMirrorExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalMirrorExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *Mirror) GetName() string {
	return a.Name
}

func (a *Mirror) GetOutputPort() *string {
	return a.OutputPort
}

func copyMirrorOutputPort(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalMirrorOutputPort(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Mirror) GetOutputVLAN() *int {
	return a.OutputVLAN
}

func copyMirrorOutputVLAN(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalMirrorOutputVLAN(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Mirror) GetSelectAll() bool {
	return a.SelectAll
}

func (a *Mirror) GetSelectDstPort() []string {
	return a.SelectDstPort
}

func copyMirrorSelectDstPort(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalMirrorSelectDstPort(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *Mirror) GetSelectSrcPort() []string {
	return a.SelectSrcPort
}

func copyMirrorSelectSrcPort(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalMirrorSelectSrcPort(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *Mirror) GetSelectVLAN() []int {
	return a.SelectVLAN
}

func copyMirrorSelectVLAN(a []int) []int {
	if a == nil {
		return nil
	}
	b := make([]int, len(a))
	copy(b, a)
	return b
}

func equalMirrorSelectVLAN(a, b []int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *Mirror) GetSnaplen() *int {
	return a.Snaplen
}

func copyMirrorSnaplen(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalMirrorSnaplen(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Mirror) GetStatistics() map[string]int {
	return a.Statistics
}

func copyMirrorStatistics(a map[string]int) map[string]int {
	if a == nil {
		return nil
	}
	b := make(map[string]int, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalMirrorStatistics(a, b map[string]int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *Mirror) DeepCopyInto(b *Mirror) {
	*b = *a
	b.ExternalIDs = copyMirrorExternalIDs(a.ExternalIDs)
	b.OutputPort = copyMirrorOutputPort(a.OutputPort)
	b.OutputVLAN = copyMirrorOutputVLAN(a.OutputVLAN)
	b.SelectDstPort = copyMirrorSelectDstPort(a.SelectDstPort)
	b.SelectSrcPort = copyMirrorSelectSrcPort(a.SelectSrcPort)
	b.SelectVLAN = copyMirrorSelectVLAN(a.SelectVLAN)
	b.Snaplen = copyMirrorSnaplen(a.Snaplen)
	b.Statistics = copyMirrorStatistics(a.Statistics)
}

func (a *Mirror) DeepCopy() *Mirror {
	b := new(Mirror)
	a.DeepCopyInto(b)
	return b
}

func (a *Mirror) CloneModelInto(b model.Model) {
	c := b.(*Mirror)
	a.DeepCopyInto(c)
}

func (a *Mirror) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *Mirror) Equals(b *Mirror) bool {
	return a.UUID == b.UUID &&
		equalMirrorExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		a.Name == b.Name &&
		equalMirrorOutputPort(a.OutputPort, b.OutputPort) &&
		equalMirrorOutputVLAN(a.OutputVLAN, b.OutputVLAN) &&
		a.SelectAll == b.SelectAll &&
		equalMirrorSelectDstPort(a.SelectDstPort, b.SelectDstPort) &&
		equalMirrorSelectSrcPort(a.SelectSrcPort, b.SelectSrcPort) &&
		equalMirrorSelectVLAN(a.SelectVLAN, b.SelectVLAN) &&
		equalMirrorSnaplen(a.Snaplen, b.Snaplen) &&
		equalMirrorStatistics(a.Statistics, b.Statistics)
}

func (a *Mirror) EqualsModel(b model.Model) bool {
	c := b.(*Mirror)
	return a.Equals(c)
}

var _ model.CloneableModel = &Mirror{}
var _ model.ComparableModel = &Mirror{}
