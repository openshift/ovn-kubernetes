// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package vswitchd

import "github.com/ovn-org/libovsdb/model"

const IPFIXTable = "IPFIX"

// IPFIX defines an object in IPFIX table
type IPFIX struct {
	UUID               string            `ovsdb:"_uuid"`
	CacheActiveTimeout *int              `ovsdb:"cache_active_timeout"`
	CacheMaxFlows      *int              `ovsdb:"cache_max_flows"`
	ExternalIDs        map[string]string `ovsdb:"external_ids"`
	ObsDomainID        *int              `ovsdb:"obs_domain_id"`
	ObsPointID         *int              `ovsdb:"obs_point_id"`
	OtherConfig        map[string]string `ovsdb:"other_config"`
	Sampling           *int              `ovsdb:"sampling"`
	Targets            []string          `ovsdb:"targets"`
}

func (a *IPFIX) GetUUID() string {
	return a.UUID
}

func (a *IPFIX) GetCacheActiveTimeout() *int {
	return a.CacheActiveTimeout
}

func copyIPFIXCacheActiveTimeout(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalIPFIXCacheActiveTimeout(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *IPFIX) GetCacheMaxFlows() *int {
	return a.CacheMaxFlows
}

func copyIPFIXCacheMaxFlows(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalIPFIXCacheMaxFlows(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *IPFIX) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copyIPFIXExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalIPFIXExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *IPFIX) GetObsDomainID() *int {
	return a.ObsDomainID
}

func copyIPFIXObsDomainID(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalIPFIXObsDomainID(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *IPFIX) GetObsPointID() *int {
	return a.ObsPointID
}

func copyIPFIXObsPointID(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalIPFIXObsPointID(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *IPFIX) GetOtherConfig() map[string]string {
	return a.OtherConfig
}

func copyIPFIXOtherConfig(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalIPFIXOtherConfig(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *IPFIX) GetSampling() *int {
	return a.Sampling
}

func copyIPFIXSampling(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalIPFIXSampling(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *IPFIX) GetTargets() []string {
	return a.Targets
}

func copyIPFIXTargets(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalIPFIXTargets(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *IPFIX) DeepCopyInto(b *IPFIX) {
	*b = *a
	b.CacheActiveTimeout = copyIPFIXCacheActiveTimeout(a.CacheActiveTimeout)
	b.CacheMaxFlows = copyIPFIXCacheMaxFlows(a.CacheMaxFlows)
	b.ExternalIDs = copyIPFIXExternalIDs(a.ExternalIDs)
	b.ObsDomainID = copyIPFIXObsDomainID(a.ObsDomainID)
	b.ObsPointID = copyIPFIXObsPointID(a.ObsPointID)
	b.OtherConfig = copyIPFIXOtherConfig(a.OtherConfig)
	b.Sampling = copyIPFIXSampling(a.Sampling)
	b.Targets = copyIPFIXTargets(a.Targets)
}

func (a *IPFIX) DeepCopy() *IPFIX {
	b := new(IPFIX)
	a.DeepCopyInto(b)
	return b
}

func (a *IPFIX) CloneModelInto(b model.Model) {
	c := b.(*IPFIX)
	a.DeepCopyInto(c)
}

func (a *IPFIX) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *IPFIX) Equals(b *IPFIX) bool {
	return a.UUID == b.UUID &&
		equalIPFIXCacheActiveTimeout(a.CacheActiveTimeout, b.CacheActiveTimeout) &&
		equalIPFIXCacheMaxFlows(a.CacheMaxFlows, b.CacheMaxFlows) &&
		equalIPFIXExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		equalIPFIXObsDomainID(a.ObsDomainID, b.ObsDomainID) &&
		equalIPFIXObsPointID(a.ObsPointID, b.ObsPointID) &&
		equalIPFIXOtherConfig(a.OtherConfig, b.OtherConfig) &&
		equalIPFIXSampling(a.Sampling, b.Sampling) &&
		equalIPFIXTargets(a.Targets, b.Targets)
}

func (a *IPFIX) EqualsModel(b model.Model) bool {
	c := b.(*IPFIX)
	return a.Equals(c)
}

var _ model.CloneableModel = &IPFIX{}
var _ model.ComparableModel = &IPFIX{}
