// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package vswitchd

import "github.com/ovn-org/libovsdb/model"

const OpenvSwitchTable = "Open_vSwitch"

// OpenvSwitch defines an object in Open_vSwitch table
type OpenvSwitch struct {
	UUID            string            `ovsdb:"_uuid"`
	Bridges         []string          `ovsdb:"bridges"`
	CurCfg          int               `ovsdb:"cur_cfg"`
	DatapathTypes   []string          `ovsdb:"datapath_types"`
	Datapaths       map[string]string `ovsdb:"datapaths"`
	DbVersion       *string           `ovsdb:"db_version"`
	DpdkInitialized bool              `ovsdb:"dpdk_initialized"`
	DpdkVersion     *string           `ovsdb:"dpdk_version"`
	ExternalIDs     map[string]string `ovsdb:"external_ids"`
	IfaceTypes      []string          `ovsdb:"iface_types"`
	ManagerOptions  []string          `ovsdb:"manager_options"`
	NextCfg         int               `ovsdb:"next_cfg"`
	OtherConfig     map[string]string `ovsdb:"other_config"`
	OVSVersion      *string           `ovsdb:"ovs_version"`
	SSL             *string           `ovsdb:"ssl"`
	Statistics      map[string]string `ovsdb:"statistics"`
	SystemType      *string           `ovsdb:"system_type"`
	SystemVersion   *string           `ovsdb:"system_version"`
}

func (a *OpenvSwitch) GetUUID() string {
	return a.UUID
}

func (a *OpenvSwitch) GetBridges() []string {
	return a.Bridges
}

func copyOpenvSwitchBridges(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalOpenvSwitchBridges(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *OpenvSwitch) GetCurCfg() int {
	return a.CurCfg
}

func (a *OpenvSwitch) GetDatapathTypes() []string {
	return a.DatapathTypes
}

func copyOpenvSwitchDatapathTypes(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalOpenvSwitchDatapathTypes(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *OpenvSwitch) GetDatapaths() map[string]string {
	return a.Datapaths
}

func copyOpenvSwitchDatapaths(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalOpenvSwitchDatapaths(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *OpenvSwitch) GetDbVersion() *string {
	return a.DbVersion
}

func copyOpenvSwitchDbVersion(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalOpenvSwitchDbVersion(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *OpenvSwitch) GetDpdkInitialized() bool {
	return a.DpdkInitialized
}

func (a *OpenvSwitch) GetDpdkVersion() *string {
	return a.DpdkVersion
}

func copyOpenvSwitchDpdkVersion(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalOpenvSwitchDpdkVersion(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *OpenvSwitch) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copyOpenvSwitchExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalOpenvSwitchExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *OpenvSwitch) GetIfaceTypes() []string {
	return a.IfaceTypes
}

func copyOpenvSwitchIfaceTypes(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalOpenvSwitchIfaceTypes(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *OpenvSwitch) GetManagerOptions() []string {
	return a.ManagerOptions
}

func copyOpenvSwitchManagerOptions(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalOpenvSwitchManagerOptions(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *OpenvSwitch) GetNextCfg() int {
	return a.NextCfg
}

func (a *OpenvSwitch) GetOtherConfig() map[string]string {
	return a.OtherConfig
}

func copyOpenvSwitchOtherConfig(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalOpenvSwitchOtherConfig(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *OpenvSwitch) GetOVSVersion() *string {
	return a.OVSVersion
}

func copyOpenvSwitchOVSVersion(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalOpenvSwitchOVSVersion(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *OpenvSwitch) GetSSL() *string {
	return a.SSL
}

func copyOpenvSwitchSSL(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalOpenvSwitchSSL(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *OpenvSwitch) GetStatistics() map[string]string {
	return a.Statistics
}

func copyOpenvSwitchStatistics(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalOpenvSwitchStatistics(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *OpenvSwitch) GetSystemType() *string {
	return a.SystemType
}

func copyOpenvSwitchSystemType(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalOpenvSwitchSystemType(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *OpenvSwitch) GetSystemVersion() *string {
	return a.SystemVersion
}

func copyOpenvSwitchSystemVersion(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalOpenvSwitchSystemVersion(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *OpenvSwitch) DeepCopyInto(b *OpenvSwitch) {
	*b = *a
	b.Bridges = copyOpenvSwitchBridges(a.Bridges)
	b.DatapathTypes = copyOpenvSwitchDatapathTypes(a.DatapathTypes)
	b.Datapaths = copyOpenvSwitchDatapaths(a.Datapaths)
	b.DbVersion = copyOpenvSwitchDbVersion(a.DbVersion)
	b.DpdkVersion = copyOpenvSwitchDpdkVersion(a.DpdkVersion)
	b.ExternalIDs = copyOpenvSwitchExternalIDs(a.ExternalIDs)
	b.IfaceTypes = copyOpenvSwitchIfaceTypes(a.IfaceTypes)
	b.ManagerOptions = copyOpenvSwitchManagerOptions(a.ManagerOptions)
	b.OtherConfig = copyOpenvSwitchOtherConfig(a.OtherConfig)
	b.OVSVersion = copyOpenvSwitchOVSVersion(a.OVSVersion)
	b.SSL = copyOpenvSwitchSSL(a.SSL)
	b.Statistics = copyOpenvSwitchStatistics(a.Statistics)
	b.SystemType = copyOpenvSwitchSystemType(a.SystemType)
	b.SystemVersion = copyOpenvSwitchSystemVersion(a.SystemVersion)
}

func (a *OpenvSwitch) DeepCopy() *OpenvSwitch {
	b := new(OpenvSwitch)
	a.DeepCopyInto(b)
	return b
}

func (a *OpenvSwitch) CloneModelInto(b model.Model) {
	c := b.(*OpenvSwitch)
	a.DeepCopyInto(c)
}

func (a *OpenvSwitch) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *OpenvSwitch) Equals(b *OpenvSwitch) bool {
	return a.UUID == b.UUID &&
		equalOpenvSwitchBridges(a.Bridges, b.Bridges) &&
		a.CurCfg == b.CurCfg &&
		equalOpenvSwitchDatapathTypes(a.DatapathTypes, b.DatapathTypes) &&
		equalOpenvSwitchDatapaths(a.Datapaths, b.Datapaths) &&
		equalOpenvSwitchDbVersion(a.DbVersion, b.DbVersion) &&
		a.DpdkInitialized == b.DpdkInitialized &&
		equalOpenvSwitchDpdkVersion(a.DpdkVersion, b.DpdkVersion) &&
		equalOpenvSwitchExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		equalOpenvSwitchIfaceTypes(a.IfaceTypes, b.IfaceTypes) &&
		equalOpenvSwitchManagerOptions(a.ManagerOptions, b.ManagerOptions) &&
		a.NextCfg == b.NextCfg &&
		equalOpenvSwitchOtherConfig(a.OtherConfig, b.OtherConfig) &&
		equalOpenvSwitchOVSVersion(a.OVSVersion, b.OVSVersion) &&
		equalOpenvSwitchSSL(a.SSL, b.SSL) &&
		equalOpenvSwitchStatistics(a.Statistics, b.Statistics) &&
		equalOpenvSwitchSystemType(a.SystemType, b.SystemType) &&
		equalOpenvSwitchSystemVersion(a.SystemVersion, b.SystemVersion)
}

func (a *OpenvSwitch) EqualsModel(b model.Model) bool {
	c := b.(*OpenvSwitch)
	return a.Equals(c)
}

var _ model.CloneableModel = &OpenvSwitch{}
var _ model.ComparableModel = &OpenvSwitch{}
