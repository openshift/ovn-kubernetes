// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package vswitchd

import "github.com/ovn-org/libovsdb/model"

const FlowTableTable = "Flow_Table"

type (
	FlowTableOverflowPolicy = string
)

var (
	FlowTableOverflowPolicyRefuse FlowTableOverflowPolicy = "refuse"
	FlowTableOverflowPolicyEvict  FlowTableOverflowPolicy = "evict"
)

// FlowTable defines an object in Flow_Table table
type FlowTable struct {
	UUID           string                   `ovsdb:"_uuid"`
	ExternalIDs    map[string]string        `ovsdb:"external_ids"`
	FlowLimit      *int                     `ovsdb:"flow_limit"`
	Groups         []string                 `ovsdb:"groups"`
	Name           *string                  `ovsdb:"name"`
	OverflowPolicy *FlowTableOverflowPolicy `ovsdb:"overflow_policy"`
	Prefixes       []string                 `ovsdb:"prefixes"`
}

func (a *FlowTable) GetUUID() string {
	return a.UUID
}

func (a *FlowTable) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copyFlowTableExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalFlowTableExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *FlowTable) GetFlowLimit() *int {
	return a.FlowLimit
}

func copyFlowTableFlowLimit(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalFlowTableFlowLimit(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *FlowTable) GetGroups() []string {
	return a.Groups
}

func copyFlowTableGroups(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalFlowTableGroups(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *FlowTable) GetName() *string {
	return a.Name
}

func copyFlowTableName(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalFlowTableName(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *FlowTable) GetOverflowPolicy() *FlowTableOverflowPolicy {
	return a.OverflowPolicy
}

func copyFlowTableOverflowPolicy(a *FlowTableOverflowPolicy) *FlowTableOverflowPolicy {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalFlowTableOverflowPolicy(a, b *FlowTableOverflowPolicy) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *FlowTable) GetPrefixes() []string {
	return a.Prefixes
}

func copyFlowTablePrefixes(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalFlowTablePrefixes(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *FlowTable) DeepCopyInto(b *FlowTable) {
	*b = *a
	b.ExternalIDs = copyFlowTableExternalIDs(a.ExternalIDs)
	b.FlowLimit = copyFlowTableFlowLimit(a.FlowLimit)
	b.Groups = copyFlowTableGroups(a.Groups)
	b.Name = copyFlowTableName(a.Name)
	b.OverflowPolicy = copyFlowTableOverflowPolicy(a.OverflowPolicy)
	b.Prefixes = copyFlowTablePrefixes(a.Prefixes)
}

func (a *FlowTable) DeepCopy() *FlowTable {
	b := new(FlowTable)
	a.DeepCopyInto(b)
	return b
}

func (a *FlowTable) CloneModelInto(b model.Model) {
	c := b.(*FlowTable)
	a.DeepCopyInto(c)
}

func (a *FlowTable) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *FlowTable) Equals(b *FlowTable) bool {
	return a.UUID == b.UUID &&
		equalFlowTableExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		equalFlowTableFlowLimit(a.FlowLimit, b.FlowLimit) &&
		equalFlowTableGroups(a.Groups, b.Groups) &&
		equalFlowTableName(a.Name, b.Name) &&
		equalFlowTableOverflowPolicy(a.OverflowPolicy, b.OverflowPolicy) &&
		equalFlowTablePrefixes(a.Prefixes, b.Prefixes)
}

func (a *FlowTable) EqualsModel(b model.Model) bool {
	c := b.(*FlowTable)
	return a.Equals(c)
}

var _ model.CloneableModel = &FlowTable{}
var _ model.ComparableModel = &FlowTable{}
