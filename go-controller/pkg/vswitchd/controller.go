// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package vswitchd

import "github.com/ovn-org/libovsdb/model"

const ControllerTable = "Controller"

type (
	ControllerConnectionMode = string
	ControllerRole           = string
	ControllerType           = string
)

var (
	ControllerConnectionModeInBand    ControllerConnectionMode = "in-band"
	ControllerConnectionModeOutOfBand ControllerConnectionMode = "out-of-band"
	ControllerRoleOther               ControllerRole           = "other"
	ControllerRoleMaster              ControllerRole           = "master"
	ControllerRoleSlave               ControllerRole           = "slave"
	ControllerTypePrimary             ControllerType           = "primary"
	ControllerTypeService             ControllerType           = "service"
)

// Controller defines an object in Controller table
type Controller struct {
	UUID                 string                    `ovsdb:"_uuid"`
	ConnectionMode       *ControllerConnectionMode `ovsdb:"connection_mode"`
	ControllerBurstLimit *int                      `ovsdb:"controller_burst_limit"`
	ControllerQueueSize  *int                      `ovsdb:"controller_queue_size"`
	ControllerRateLimit  *int                      `ovsdb:"controller_rate_limit"`
	EnableAsyncMessages  *bool                     `ovsdb:"enable_async_messages"`
	ExternalIDs          map[string]string         `ovsdb:"external_ids"`
	InactivityProbe      *int                      `ovsdb:"inactivity_probe"`
	IsConnected          bool                      `ovsdb:"is_connected"`
	LocalGateway         *string                   `ovsdb:"local_gateway"`
	LocalIP              *string                   `ovsdb:"local_ip"`
	LocalNetmask         *string                   `ovsdb:"local_netmask"`
	MaxBackoff           *int                      `ovsdb:"max_backoff"`
	OtherConfig          map[string]string         `ovsdb:"other_config"`
	Role                 *ControllerRole           `ovsdb:"role"`
	Status               map[string]string         `ovsdb:"status"`
	Target               string                    `ovsdb:"target"`
	Type                 *ControllerType           `ovsdb:"type"`
}

func (a *Controller) GetUUID() string {
	return a.UUID
}

func (a *Controller) GetConnectionMode() *ControllerConnectionMode {
	return a.ConnectionMode
}

func copyControllerConnectionMode(a *ControllerConnectionMode) *ControllerConnectionMode {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalControllerConnectionMode(a, b *ControllerConnectionMode) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Controller) GetControllerBurstLimit() *int {
	return a.ControllerBurstLimit
}

func copyControllerControllerBurstLimit(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalControllerControllerBurstLimit(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Controller) GetControllerQueueSize() *int {
	return a.ControllerQueueSize
}

func copyControllerControllerQueueSize(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalControllerControllerQueueSize(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Controller) GetControllerRateLimit() *int {
	return a.ControllerRateLimit
}

func copyControllerControllerRateLimit(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalControllerControllerRateLimit(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Controller) GetEnableAsyncMessages() *bool {
	return a.EnableAsyncMessages
}

func copyControllerEnableAsyncMessages(a *bool) *bool {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalControllerEnableAsyncMessages(a, b *bool) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Controller) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copyControllerExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalControllerExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *Controller) GetInactivityProbe() *int {
	return a.InactivityProbe
}

func copyControllerInactivityProbe(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalControllerInactivityProbe(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Controller) GetIsConnected() bool {
	return a.IsConnected
}

func (a *Controller) GetLocalGateway() *string {
	return a.LocalGateway
}

func copyControllerLocalGateway(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalControllerLocalGateway(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Controller) GetLocalIP() *string {
	return a.LocalIP
}

func copyControllerLocalIP(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalControllerLocalIP(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Controller) GetLocalNetmask() *string {
	return a.LocalNetmask
}

func copyControllerLocalNetmask(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalControllerLocalNetmask(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Controller) GetMaxBackoff() *int {
	return a.MaxBackoff
}

func copyControllerMaxBackoff(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalControllerMaxBackoff(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Controller) GetOtherConfig() map[string]string {
	return a.OtherConfig
}

func copyControllerOtherConfig(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalControllerOtherConfig(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *Controller) GetRole() *ControllerRole {
	return a.Role
}

func copyControllerRole(a *ControllerRole) *ControllerRole {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalControllerRole(a, b *ControllerRole) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Controller) GetStatus() map[string]string {
	return a.Status
}

func copyControllerStatus(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalControllerStatus(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *Controller) GetTarget() string {
	return a.Target
}

func (a *Controller) GetType() *ControllerType {
	return a.Type
}

func copyControllerType(a *ControllerType) *ControllerType {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalControllerType(a, b *ControllerType) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Controller) DeepCopyInto(b *Controller) {
	*b = *a
	b.ConnectionMode = copyControllerConnectionMode(a.ConnectionMode)
	b.ControllerBurstLimit = copyControllerControllerBurstLimit(a.ControllerBurstLimit)
	b.ControllerQueueSize = copyControllerControllerQueueSize(a.ControllerQueueSize)
	b.ControllerRateLimit = copyControllerControllerRateLimit(a.ControllerRateLimit)
	b.EnableAsyncMessages = copyControllerEnableAsyncMessages(a.EnableAsyncMessages)
	b.ExternalIDs = copyControllerExternalIDs(a.ExternalIDs)
	b.InactivityProbe = copyControllerInactivityProbe(a.InactivityProbe)
	b.LocalGateway = copyControllerLocalGateway(a.LocalGateway)
	b.LocalIP = copyControllerLocalIP(a.LocalIP)
	b.LocalNetmask = copyControllerLocalNetmask(a.LocalNetmask)
	b.MaxBackoff = copyControllerMaxBackoff(a.MaxBackoff)
	b.OtherConfig = copyControllerOtherConfig(a.OtherConfig)
	b.Role = copyControllerRole(a.Role)
	b.Status = copyControllerStatus(a.Status)
	b.Type = copyControllerType(a.Type)
}

func (a *Controller) DeepCopy() *Controller {
	b := new(Controller)
	a.DeepCopyInto(b)
	return b
}

func (a *Controller) CloneModelInto(b model.Model) {
	c := b.(*Controller)
	a.DeepCopyInto(c)
}

func (a *Controller) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *Controller) Equals(b *Controller) bool {
	return a.UUID == b.UUID &&
		equalControllerConnectionMode(a.ConnectionMode, b.ConnectionMode) &&
		equalControllerControllerBurstLimit(a.ControllerBurstLimit, b.ControllerBurstLimit) &&
		equalControllerControllerQueueSize(a.ControllerQueueSize, b.ControllerQueueSize) &&
		equalControllerControllerRateLimit(a.ControllerRateLimit, b.ControllerRateLimit) &&
		equalControllerEnableAsyncMessages(a.EnableAsyncMessages, b.EnableAsyncMessages) &&
		equalControllerExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		equalControllerInactivityProbe(a.InactivityProbe, b.InactivityProbe) &&
		a.IsConnected == b.IsConnected &&
		equalControllerLocalGateway(a.LocalGateway, b.LocalGateway) &&
		equalControllerLocalIP(a.LocalIP, b.LocalIP) &&
		equalControllerLocalNetmask(a.LocalNetmask, b.LocalNetmask) &&
		equalControllerMaxBackoff(a.MaxBackoff, b.MaxBackoff) &&
		equalControllerOtherConfig(a.OtherConfig, b.OtherConfig) &&
		equalControllerRole(a.Role, b.Role) &&
		equalControllerStatus(a.Status, b.Status) &&
		a.Target == b.Target &&
		equalControllerType(a.Type, b.Type)
}

func (a *Controller) EqualsModel(b model.Model) bool {
	c := b.(*Controller)
	return a.Equals(c)
}

var _ model.CloneableModel = &Controller{}
var _ model.ComparableModel = &Controller{}
