// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package vswitchd

import "github.com/ovn-org/libovsdb/model"

const CTTimeoutPolicyTable = "CT_Timeout_Policy"

type (
	CTTimeoutPolicyTimeouts = string
)

var (
	CTTimeoutPolicyTimeoutsTCPSynSent     CTTimeoutPolicyTimeouts = "tcp_syn_sent"
	CTTimeoutPolicyTimeoutsTCPSynRecv     CTTimeoutPolicyTimeouts = "tcp_syn_recv"
	CTTimeoutPolicyTimeoutsTCPEstablished CTTimeoutPolicyTimeouts = "tcp_established"
	CTTimeoutPolicyTimeoutsTCPFinWait     CTTimeoutPolicyTimeouts = "tcp_fin_wait"
	CTTimeoutPolicyTimeoutsTCPCloseWait   CTTimeoutPolicyTimeouts = "tcp_close_wait"
	CTTimeoutPolicyTimeoutsTCPLastAck     CTTimeoutPolicyTimeouts = "tcp_last_ack"
	CTTimeoutPolicyTimeoutsTCPTimeWait    CTTimeoutPolicyTimeouts = "tcp_time_wait"
	CTTimeoutPolicyTimeoutsTCPClose       CTTimeoutPolicyTimeouts = "tcp_close"
	CTTimeoutPolicyTimeoutsTCPSynSent2    CTTimeoutPolicyTimeouts = "tcp_syn_sent2"
	CTTimeoutPolicyTimeoutsTCPRetransmit  CTTimeoutPolicyTimeouts = "tcp_retransmit"
	CTTimeoutPolicyTimeoutsTCPUnack       CTTimeoutPolicyTimeouts = "tcp_unack"
	CTTimeoutPolicyTimeoutsUDPFirst       CTTimeoutPolicyTimeouts = "udp_first"
	CTTimeoutPolicyTimeoutsUDPSingle      CTTimeoutPolicyTimeouts = "udp_single"
	CTTimeoutPolicyTimeoutsUDPMultiple    CTTimeoutPolicyTimeouts = "udp_multiple"
	CTTimeoutPolicyTimeoutsICMPFirst      CTTimeoutPolicyTimeouts = "icmp_first"
	CTTimeoutPolicyTimeoutsICMPReply      CTTimeoutPolicyTimeouts = "icmp_reply"
)

// CTTimeoutPolicy defines an object in CT_Timeout_Policy table
type CTTimeoutPolicy struct {
	UUID        string            `ovsdb:"_uuid"`
	ExternalIDs map[string]string `ovsdb:"external_ids"`
	Timeouts    map[string]int    `ovsdb:"timeouts"`
}

func (a *CTTimeoutPolicy) GetUUID() string {
	return a.UUID
}

func (a *CTTimeoutPolicy) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copyCTTimeoutPolicyExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalCTTimeoutPolicyExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *CTTimeoutPolicy) GetTimeouts() map[string]int {
	return a.Timeouts
}

func copyCTTimeoutPolicyTimeouts(a map[string]int) map[string]int {
	if a == nil {
		return nil
	}
	b := make(map[string]int, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalCTTimeoutPolicyTimeouts(a, b map[string]int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *CTTimeoutPolicy) DeepCopyInto(b *CTTimeoutPolicy) {
	*b = *a
	b.ExternalIDs = copyCTTimeoutPolicyExternalIDs(a.ExternalIDs)
	b.Timeouts = copyCTTimeoutPolicyTimeouts(a.Timeouts)
}

func (a *CTTimeoutPolicy) DeepCopy() *CTTimeoutPolicy {
	b := new(CTTimeoutPolicy)
	a.DeepCopyInto(b)
	return b
}

func (a *CTTimeoutPolicy) CloneModelInto(b model.Model) {
	c := b.(*CTTimeoutPolicy)
	a.DeepCopyInto(c)
}

func (a *CTTimeoutPolicy) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *CTTimeoutPolicy) Equals(b *CTTimeoutPolicy) bool {
	return a.UUID == b.UUID &&
		equalCTTimeoutPolicyExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		equalCTTimeoutPolicyTimeouts(a.Timeouts, b.Timeouts)
}

func (a *CTTimeoutPolicy) EqualsModel(b model.Model) bool {
	c := b.(*CTTimeoutPolicy)
	return a.Equals(c)
}

var _ model.CloneableModel = &CTTimeoutPolicy{}
var _ model.ComparableModel = &CTTimeoutPolicy{}
