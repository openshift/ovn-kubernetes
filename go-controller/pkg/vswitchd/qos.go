// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package vswitchd

import "github.com/ovn-org/libovsdb/model"

const QoSTable = "QoS"

// QoS defines an object in QoS table
type QoS struct {
	UUID        string            `ovsdb:"_uuid"`
	ExternalIDs map[string]string `ovsdb:"external_ids"`
	OtherConfig map[string]string `ovsdb:"other_config"`
	Queues      map[int]string    `ovsdb:"queues"`
	Type        string            `ovsdb:"type"`
}

func (a *QoS) GetUUID() string {
	return a.UUID
}

func (a *QoS) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copyQoSExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalQoSExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *QoS) GetOtherConfig() map[string]string {
	return a.OtherConfig
}

func copyQoSOtherConfig(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalQoSOtherConfig(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *QoS) GetQueues() map[int]string {
	return a.Queues
}

func copyQoSQueues(a map[int]string) map[int]string {
	if a == nil {
		return nil
	}
	b := make(map[int]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalQoSQueues(a, b map[int]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *QoS) GetType() string {
	return a.Type
}

func (a *QoS) DeepCopyInto(b *QoS) {
	*b = *a
	b.ExternalIDs = copyQoSExternalIDs(a.ExternalIDs)
	b.OtherConfig = copyQoSOtherConfig(a.OtherConfig)
	b.Queues = copyQoSQueues(a.Queues)
}

func (a *QoS) DeepCopy() *QoS {
	b := new(QoS)
	a.DeepCopyInto(b)
	return b
}

func (a *QoS) CloneModelInto(b model.Model) {
	c := b.(*QoS)
	a.DeepCopyInto(c)
}

func (a *QoS) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *QoS) Equals(b *QoS) bool {
	return a.UUID == b.UUID &&
		equalQoSExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		equalQoSOtherConfig(a.OtherConfig, b.OtherConfig) &&
		equalQoSQueues(a.Queues, b.Queues) &&
		a.Type == b.Type
}

func (a *QoS) EqualsModel(b model.Model) bool {
	c := b.(*QoS)
	return a.Equals(c)
}

var _ model.CloneableModel = &QoS{}
var _ model.ComparableModel = &QoS{}
