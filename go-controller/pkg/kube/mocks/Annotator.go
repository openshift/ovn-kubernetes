// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Annotator is an autogenerated mock type for the Annotator type
type Annotator struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key
func (_m *Annotator) Delete(key string) {
	_m.Called(key)
}

// Run provides a mock function with given fields:
func (_m *Annotator) Run() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: key, value
func (_m *Annotator) Set(key string, value interface{}) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAnnotator interface {
	mock.TestingT
	Cleanup(func())
}

// NewAnnotator creates a new instance of Annotator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAnnotator(t mockConstructorTestingTNewAnnotator) *Annotator {
	mock := &Annotator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
