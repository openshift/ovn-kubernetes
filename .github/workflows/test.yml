name: ovn-ci

on:
  push:
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 */12 * * *'

env:
  GO_VERSION: "1.16.3"
  K8S_VERSION: v1.20.2
  KIND_CLUSTER_NAME: ovn
  KIND_INSTALL_INGRESS: true
  KIND_ALLOW_SYSTEM_WRITES: true
  # This skips tests tagged as Serial
  # Current Serial tests are not relevant for OVN
  PARALLEL: true

jobs:
  # separate job for parallelism
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Verify
      uses: golangci/golangci-lint-action@v2
      with:
        version: v1.33.2
        working-directory: go-controller
        args: --modules-download-mode=vendor --timeout=15m0s --verbose

  build-master:
    name: Build-master
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
      id: go

    - name: Check out code into the Go module directory - from master branch
      uses: actions/checkout@v2
      with:
        ref: master

    - name: Build - from master branch
      run: |
        set -x
        pushd go-controller
           make
           make windows
        popd

    - name: Build docker image - from master branch
      run: |
        pushd dist/images
          sudo cp -f ../../go-controller/_output/go/bin/ovn* .
          echo "ref: $(git rev-parse  --symbolic-full-name HEAD)  commit: $(git rev-parse  HEAD)" > git_info
          docker build -t ovn-daemonset-f:dev -f Dockerfile.fedora .
          mkdir _output
          docker save ovn-daemonset-f:dev > _output/image-master.tar
        popd

    - uses: actions/upload-artifact@v2
      with:
        name: test-image-master
        path: dist/images/_output/image-master.tar

  build-pr:
    name: Build-PR
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
      id: go

    - name: Check out code into the Go module directory - from current pr branch
      uses: actions/checkout@v2

    - name: Build and Test - from current pr branch
      run: |
        set -x
        pushd go-controller
           make
           make windows
           COVERALLS=1 CONTAINER_RUNNABLE=1 make check
        popd

    - name: Build docker image - from current pr branch
      run: |
        pushd dist/images
          sudo cp -f ../../go-controller/_output/go/bin/ovn* .
          echo "ref: $(git rev-parse  --symbolic-full-name HEAD)  commit: $(git rev-parse  HEAD)" > git_info
          docker build -t ovn-daemonset-f:pr -f Dockerfile.fedora .
          mkdir _output
          docker save ovn-daemonset-f:pr > _output/image-pr.tar
        popd

    - uses: actions/upload-artifact@v2
      with:
        name: test-image-pr
        path: dist/images/_output/image-pr.tar

    - name: Upload Junit Reports
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: junit-unit
        path: '**/_artifacts/**.xml'

    - name: Submit code coverage to Coveralls
      env:
        COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GO111MODULE: off
      run: |
        set -x
        go get github.com/mattn/goveralls
        go get github.com/modocache/gover
        PATH=$PATH:$(go env GOPATH)/bin

        mkdir -p $(go env GOPATH)/src/github.com/ovn-org
        ln -sf $(pwd) $(go env GOPATH)/src/github.com/ovn-org/ovn-kubernetes

        gover
        goveralls -coverprofile=gover.coverprofile -service=github

  ovn-upgrade-e2e:
    name: Upgrade OVN from Master to PR branch based image
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    needs:
      - build-master
      - build-pr
    strategy:
      fail-fast: false
      matrix:
        gateway-mode: [local, shared]
    env:
      JOB_NAME: "Upgrade-Tests-${{ matrix.gateway-mode }}"
      OVN_HA: "false"
      KIND_IPV4_SUPPORT: "true"
      KIND_IPV6_SUPPORT: "false"
      OVN_HYBRID_OVERLAY_ENABLE: "false"
      OVN_GATEWAY_MODE: "${{ matrix.gateway-mode }}"
      OVN_MULTICAST_ENABLE:  "false"
    steps:
    - name: Set up Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ env.GO_VERSION }}
      id: go

    - name: Set up environment
      run: |
        export GOPATH=$(go env GOPATH)
        echo "GOPATH=$GOPATH" >> $GITHUB_ENV
        echo "$GOPATH/bin" >> $GITHUB_PATH

    - name: Free up disk space
      run: sudo eatmydata apt-get remove --auto-remove -y aspnetcore-* dotnet-* libmono-* mono-* msbuild php-* php7* ghc-* zulu-*

    - uses: actions/download-artifact@v2
      with:
        name: test-image-master

    - name: Disable ufw
      # For IPv6 and Dualstack, ufw (Uncomplicated Firewall) should be disabled.
      # Not needed for KIND deployments, so just disable all the time.
      run: |
        sudo ufw disable

    - name: Load docker image
      run: |
        docker load --input image-master.tar

    - name: Check out code into the Go module directory - from master
      uses: actions/checkout@v2
      with:
        ref: master

    - name: kind setup
      run: |
        export OVN_IMAGE="ovn-daemonset-f:dev"
        make -C test install-kind

    - name: Export logs
      if: always()
      run: |
        mkdir -p /tmp/kind/logs
        kind export logs --name ${KIND_CLUSTER_NAME} --loglevel=debug /tmp/kind/logs
        set -x
        docker ps -a
        docker exec ovn-control-plane crictl images 
        docker exec ovn-worker crictl images
        docker exec ovn-worker2 crictl images 

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: kind-logs-${{ env.JOB_NAME }}-${{ github.run_id }}
        path: /tmp/kind/logs

    - uses: actions/download-artifact@v2
      with:
        name: test-image-pr

    - name: Load docker image
      run: |
        docker load --input image-pr.tar

    - name: Check out code into the Go module directory - from PR branch
      uses: actions/checkout@v2

    - name: ovn upgrade
      run: |
        export OVN_IMAGE="ovn-daemonset-f:pr"
        make -C test upgrade-ovn

    - name: Run Single-Stack Tests
      run: |
        make -C test shard-test WHAT="Networking Granular Checks"

    - name: Export logs
      if: always()
      run: |
        mkdir -p /tmp/kind/logs-kind-pr-branch
        kind export logs --name ${KIND_CLUSTER_NAME} --loglevel=debug /tmp/kind/logs-kind-pr-branch

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: kind-logs-${{ env.JOB_NAME }}-${{ github.run_id }}-after-upgrade
        path: /tmp/kind/logs-kind-pr-branch

  e2e:
    name: e2e
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        target:
          - shard: shard-conformance
            hybrid-overlay: false
            multicast-enable: false
            emptylb-enable: false
          - shard: control-plane
            hybrid-overlay: true
            multicast-enable: true
            emptylb-enable: true
        ha:
         - enabled: "true"
           name: "HA"
         - enabled: "false"
           name: "noHA"
        gateway-mode: [local, shared]
        ipfamily:
         - ip: ipv4
           name: "IPv4"
           ipv4: true
           ipv6: false
         - ip: ipv6
           name: "IPv6"
           ipv4: false
           ipv6: true
         - ip: dualstack
           name: "Dualstack"
           ipv4: true
           ipv6: true
        # Example of how to exclude a fully qualified test:
        # - {"ipfamily": {"ip": ipv4}, "ha": {"enabled": "false"}, "gateway-mode": shared, "target": {"shard": shard-n-other}}
        exclude:
         # Not currently supported but needs to be.
         - {"ipfamily": {"ip": dualstack}, "target": {"shard": control-plane}}
         - {"ipfamily": {"ip": ipv6}, "target": {"shard": control-plane}}
         # Limit matrix combinations for CI. DISABLED items added to exclude list:
         #   DISABLED  v4  ha     local
         #   ENABLED   v4  ha     shared
         #   ENABLED   v4  noha   local
         #   DISABLED  v4  noha   shared
         #   ENABLED   v6  ha     local
         #   ENABLED   v6  ha     shared
         #   DISABLED  v6  noha   local
         #   DISABLED  v6  noha   shared
         #   ENABLED   ds  ha     local
         #   DISABLED  ds  ha     shared
         #   DISABLED  ds  noha   local
         #   DISABLED  ds  noha   shared
         - {"ipfamily": {"ip": ipv4}, "ha": {"enabled": "true"}, "gateway-mode": local}
         - {"ipfamily": {"ip": ipv4}, "ha": {"enabled": "false"}, "gateway-mode": shared}
         - {"ipfamily": {"ip": ipv6}, "ha": {"enabled": "false"}, "gateway-mode": local}
         - {"ipfamily": {"ip": ipv6}, "ha": {"enabled": "false"}, "gateway-mode": shared}
         - {"ipfamily": {"ip": dualstack}, "ha": {"enabled": "true"}, "gateway-mode": shared}
         - {"ipfamily": {"ip": dualstack}, "ha": {"enabled": "false"}}
         # IPv6 multicast is supported but tests fail due to old iperf version
         # in agnhost images. Disable them for now.
         - {"ipfamily": {"ip": dualstack}, "target": {"shard": {"multicast-enable": "true"}}}
         - {"ipfamily": {"ip": ipv6}, "target": {"shard": {"multicast-enable": "true"}}}
    needs: [ build-pr ]
    env:
      JOB_NAME: "${{ matrix.target.shard }}-${{ matrix.ha.name }}-${{ matrix.gateway-mode }}-${{ matrix.ipfamily.name }}"
      OVN_HA: "${{ matrix.ha.enabled }}"
      KIND_IPV4_SUPPORT: "${{ matrix.ipfamily.ipv4 }}"
      KIND_IPV6_SUPPORT: "${{ matrix.ipfamily.ipv6 }}"
      OVN_HYBRID_OVERLAY_ENABLE: "${{ matrix.target.hybrid-overlay }}"
      OVN_GATEWAY_MODE: "${{ matrix.gateway-mode }}"
      OVN_MULTICAST_ENABLE:  "${{ matrix.target.multicast-enable }}"
      OVN_EMPTY_LB_EVENTS: "${{ matrix.target.emptylb-enable }}"
    steps:

    - name: Free up disk space
      run: sudo eatmydata apt-get remove --auto-remove -y aspnetcore-* dotnet-* libmono-* mono-* msbuild php-* php7* ghc-* zulu-*

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Set up environment
      run: |
        export GOPATH=$(go env GOPATH)
        echo "GOPATH=$GOPATH" >> $GITHUB_ENV
        echo "$GOPATH/bin" >> $GITHUB_PATH
    - name: Disable ufw
      # For IPv6 and Dualstack, ufw (Uncomplicated Firewall) should be disabled.
      # Not needed for KIND deployments, so just disable all the time.
      run: |
        sudo ufw disable
    - uses: actions/download-artifact@v2
      with:
        name: test-image-pr

    - name: Load docker image
      run: |
        docker load --input image-pr.tar
    - name: kind setup
      run: |
        export OVN_IMAGE="ovn-daemonset-f:pr"
        make -C test install-kind
    - name: Run Tests
      run: |
        make -C test ${{ matrix.target.shard }}
    - name: Upload Junit Reports
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: kind-junit-${{ env.JOB_NAME }}-${{ github.run_id }}
        path: './test/_artifacts/*.xml'

    - name: Generate Test Report
      id: xunit-viewer
      if: always()
      uses: AutoModality/action-xunit-viewer@v1
      with:
        results: ./test/_artifacts/

    - name: Upload Test Report
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test-report-${{ env.JOB_NAME }}-${{ github.run_id }}
        path: './test/_artifacts/index.html'

    - name: Export logs
      if: always()
      run: |
        mkdir -p /tmp/kind/logs
        kind export logs --name ${KIND_CLUSTER_NAME} --loglevel=debug /tmp/kind/logs
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: kind-logs-${{ env.JOB_NAME }}-${{ github.run_id }}
        path: /tmp/kind/logs

  e2e-dual-conversion:
    name: e2e-dual-conversion
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        gateway-mode: [local, shared]
    needs: [ build-pr ]
    env:
      JOB_NAME: "DualStack-conversion-${{ matrix.gateway-mode }}"
      OVN_HA: "true"
      KIND_IPV4_SUPPORT: "true"
      KIND_IPV6_SUPPORT: "false"
      OVN_HYBRID_OVERLAY_ENABLE: "false"
      OVN_GATEWAY_MODE: "${{ matrix.gateway-mode }}"
      OVN_MULTICAST_ENABLE:  "false"
    steps:

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Set up environment
      run: |
        export GOPATH=$(go env GOPATH)
        echo "GOPATH=$GOPATH" >> $GITHUB_ENV
        echo "$GOPATH/bin" >> $GITHUB_PATH
    - name: Disable ufw
      # For IPv6 and Dualstack, ufw (Uncomplicated Firewall) should be disabled.
      # Not needed for KIND deployments, so just disable all the time.
      run: |
        sudo ufw disable
    - uses: actions/download-artifact@v2
      with:
        name: test-image-pr

    - name: Load docker image
      run: |
        docker load --input image-pr.tar
    - name: kind IPv4 setup
      run: |
        export OVN_IMAGE="ovn-daemonset-f:pr"
        make -C test install-kind
    - name: Run Single-Stack Tests
      run: |
        make -C test shard-test WHAT="Networking Granular Checks"
    - name: Convert IPv4 cluster to Dual Stack
      run: |
        ./contrib/kind-dual-stack-conversion.sh
    - name: Run Dual-Stack Tests
      run: |
        KIND_IPV4_SUPPORT="true"
        KIND_IPV6_SUPPORT="true"
        make -C test shard-test WHAT="Networking Granular Checks\|DualStack"
    - name: Upload Junit Reports
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: kind-junit-${{ env.JOB_NAME }}-${{ github.run_id }}
        path: './test/_artifacts/*.xml'

    - name: Generate Test Report
      id: xunit-viewer
      if: always()
      uses: AutoModality/action-xunit-viewer@v1
      with:
        results: ./test/_artifacts/

    - name: Upload Test Report
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test-report-${{ env.JOB_NAME }}-${{ github.run_id }}
        path: './test/_artifacts/index.html'

    - name: Export logs
      if: always()
      run: |
        mkdir -p /tmp/kind/logs
        kind export logs --name ${KIND_CLUSTER_NAME} --loglevel=debug /tmp/kind/logs
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: kind-logs-${{ env.JOB_NAME }}-${{ github.run_id }}
        path: /tmp/kind/logs

  e2e-periodic:
    name: e2e-periodic
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        target:
          - shard: shard-conformance
            hybrid-overlay: false
        ha:
          - enabled: "true"
            name: "HA"
        gateway-mode: [local]
        ipfamily:
          - ip: ipv4
            name: "IPv4"
            ipv4: true
            ipv6: false
          - ip: ipv6
            name: "IPv6"
            ipv4: false
            ipv6: true
          - ip: dualstack
            name: "Dualstack"
            ipv4: true
            ipv6: true
    needs: [ build-pr ]
    env:
      JOB_NAME: "${{ matrix.target.shard }}-${{ matrix.ha.name }}-${{ matrix.gateway-mode }}-${{ matrix.ipfamily.name }}"
      OVN_HA: "${{ matrix.ha.enabled }}"
      KIND_IPV4_SUPPORT: "${{ matrix.ipfamily.ipv4 }}"
      KIND_IPV6_SUPPORT: "${{ matrix.ipfamily.ipv6 }}"
      OVN_HYBRID_OVERLAY_ENABLE: "${{ matrix.target.hybrid-overlay }}"
      OVN_GATEWAY_MODE: "${{ matrix.gateway-mode }}"
    steps:

      - name: Free up disk space
        run: sudo eatmydata apt-get remove --auto-remove -y aspnetcore-* dotnet-* libmono-* mono-* msbuild php-* php7* ghc-* zulu-*

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Set up environment
        run: |
          export GOPATH=$(go env GOPATH)
          echo "GOPATH=$GOPATH" >> $GITHUB_ENV
          echo "$GOPATH/bin" >> $GITHUB_PATH
      - name: Disable ufw
        # For IPv6 and Dualstack, ufw (Uncomplicated Firewall) should be disabled.
        # Not needed for KIND deployments, so just disable all the time.
        run: |
          sudo ufw disable
      - uses: actions/download-artifact@v2
        with:
          name: test-image-pr
      - name: Load docker image
        run: |
          docker load --input image-pr.tar
      - name: kind setup
        run: |
          export OVN_IMAGE="ovn-daemonset-f:pr"
          make -C test install-kind
      - name: Run Tests
        run: |
          make -C test ${{ matrix.target.shard }}
      - name: Upload Junit Reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kind-junit-${{ env.JOB_NAME }}-${{ github.run_id }}
          path: './test/_artifacts/*.xml'

      - name: Generate Test Report
        id: xunit-viewer
        if: always()
        uses: AutoModality/action-xunit-viewer@v1
        with:
          results: ./test/_artifacts/

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-report-${{ env.JOB_NAME }}-${{ github.run_id }}
          path: './test/_artifacts/index.html'

      - name: Export logs
        if: always()
        run: |
          mkdir -p /tmp/kind/logs
          kind export logs --name ${KIND_CLUSTER_NAME} --loglevel=debug /tmp/kind/logs
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kind-logs-${{ env.JOB_NAME }}-${{ github.run_id }}
          path: /tmp/kind/logs